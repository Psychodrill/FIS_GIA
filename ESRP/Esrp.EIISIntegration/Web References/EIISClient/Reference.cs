//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace Esrp.EIISIntegration.EIISClient {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="BaseServiceSoap", Namespace="urn:IntegrationServices")]
    public partial class BaseService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetSessionIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPackageMetaOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreatePackageOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPackageOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetOkOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUpdatesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetObjectMetaOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetObjectListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetObjectHistoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDocumentMetaOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDocumentDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetUpdatesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPackagesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPackageMD5OperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public BaseService() {
            this.Url = global::Esrp.EIISIntegration.Properties.Settings.Default.Esrp_EIISIntegration_EIISClient_BaseService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetSessionIdCompletedEventHandler GetSessionIdCompleted;
        
        /// <remarks/>
        public event GetPackageMetaCompletedEventHandler GetPackageMetaCompleted;
        
        /// <remarks/>
        public event CreatePackageCompletedEventHandler CreatePackageCompleted;
        
        /// <remarks/>
        public event GetPackageCompletedEventHandler GetPackageCompleted;
        
        /// <remarks/>
        public event SetOkCompletedEventHandler SetOkCompleted;
        
        /// <remarks/>
        public event GetUpdatesCompletedEventHandler GetUpdatesCompleted;
        
        /// <remarks/>
        public event GetObjectMetaCompletedEventHandler GetObjectMetaCompleted;
        
        /// <remarks/>
        public event GetObjectListCompletedEventHandler GetObjectListCompleted;
        
        /// <remarks/>
        public event GetObjectHistoryCompletedEventHandler GetObjectHistoryCompleted;
        
        /// <remarks/>
        public event GetDocumentMetaCompletedEventHandler GetDocumentMetaCompleted;
        
        /// <remarks/>
        public event GetDocumentDataCompletedEventHandler GetDocumentDataCompleted;
        
        /// <remarks/>
        public event SetUpdatesCompletedEventHandler SetUpdatesCompleted;
        
        /// <remarks/>
        public event GetPackagesCompletedEventHandler GetPackagesCompleted;
        
        /// <remarks/>
        public event GetPackageMD5CompletedEventHandler GetPackageMD5Completed;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:IntegrationServices/GetSessionId", RequestNamespace="urn:IntegrationServices", ResponseNamespace="urn:IntegrationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetSessionId(string login, string password) {
            object[] results = this.Invoke("GetSessionId", new object[] {
                        login,
                        password});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetSessionIdAsync(string login, string password) {
            this.GetSessionIdAsync(login, password, null);
        }
        
        /// <remarks/>
        public void GetSessionIdAsync(string login, string password, object userState) {
            if ((this.GetSessionIdOperationCompleted == null)) {
                this.GetSessionIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSessionIdOperationCompleted);
            }
            this.InvokeAsync("GetSessionId", new object[] {
                        login,
                        password}, this.GetSessionIdOperationCompleted, userState);
        }
        
        private void OnGetSessionIdOperationCompleted(object arg) {
            if ((this.GetSessionIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSessionIdCompleted(this, new GetSessionIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:IntegrationServices/GetPackageMeta", RequestNamespace="urn:IntegrationServices", ResponseNamespace="urn:IntegrationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetPackageMeta(string sessionId, string packageId) {
            object[] results = this.Invoke("GetPackageMeta", new object[] {
                        sessionId,
                        packageId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPackageMetaAsync(string sessionId, string packageId) {
            this.GetPackageMetaAsync(sessionId, packageId, null);
        }
        
        /// <remarks/>
        public void GetPackageMetaAsync(string sessionId, string packageId, object userState) {
            if ((this.GetPackageMetaOperationCompleted == null)) {
                this.GetPackageMetaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPackageMetaOperationCompleted);
            }
            this.InvokeAsync("GetPackageMeta", new object[] {
                        sessionId,
                        packageId}, this.GetPackageMetaOperationCompleted, userState);
        }
        
        private void OnGetPackageMetaOperationCompleted(object arg) {
            if ((this.GetPackageMetaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPackageMetaCompleted(this, new GetPackageMetaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:IntegrationServices/CreatePackage", RequestNamespace="urn:IntegrationServices", ResponseNamespace="urn:IntegrationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CreatePackage(string sessionId, string objectCode, bool historyCreate, bool documentInclude, string filter) {
            object[] results = this.Invoke("CreatePackage", new object[] {
                        sessionId,
                        objectCode,
                        historyCreate,
                        documentInclude,
                        filter});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CreatePackageAsync(string sessionId, string objectCode, bool historyCreate, bool documentInclude, string filter) {
            this.CreatePackageAsync(sessionId, objectCode, historyCreate, documentInclude, filter, null);
        }
        
        /// <remarks/>
        public void CreatePackageAsync(string sessionId, string objectCode, bool historyCreate, bool documentInclude, string filter, object userState) {
            if ((this.CreatePackageOperationCompleted == null)) {
                this.CreatePackageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreatePackageOperationCompleted);
            }
            this.InvokeAsync("CreatePackage", new object[] {
                        sessionId,
                        objectCode,
                        historyCreate,
                        documentInclude,
                        filter}, this.CreatePackageOperationCompleted, userState);
        }
        
        private void OnCreatePackageOperationCompleted(object arg) {
            if ((this.CreatePackageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreatePackageCompleted(this, new CreatePackageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:IntegrationServices/GetPackage", RequestNamespace="urn:IntegrationServices", ResponseNamespace="urn:IntegrationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetPackage(string sessionId, string packageId, int part) {
            object[] results = this.Invoke("GetPackage", new object[] {
                        sessionId,
                        packageId,
                        part});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPackageAsync(string sessionId, string packageId, int part) {
            this.GetPackageAsync(sessionId, packageId, part, null);
        }
        
        /// <remarks/>
        public void GetPackageAsync(string sessionId, string packageId, int part, object userState) {
            if ((this.GetPackageOperationCompleted == null)) {
                this.GetPackageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPackageOperationCompleted);
            }
            this.InvokeAsync("GetPackage", new object[] {
                        sessionId,
                        packageId,
                        part}, this.GetPackageOperationCompleted, userState);
        }
        
        private void OnGetPackageOperationCompleted(object arg) {
            if ((this.GetPackageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPackageCompleted(this, new GetPackageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:IntegrationServices/SetOk", RequestNamespace="urn:IntegrationServices", ResponseNamespace="urn:IntegrationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SetOk(string sessionId, string packageId) {
            object[] results = this.Invoke("SetOk", new object[] {
                        sessionId,
                        packageId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SetOkAsync(string sessionId, string packageId) {
            this.SetOkAsync(sessionId, packageId, null);
        }
        
        /// <remarks/>
        public void SetOkAsync(string sessionId, string packageId, object userState) {
            if ((this.SetOkOperationCompleted == null)) {
                this.SetOkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetOkOperationCompleted);
            }
            this.InvokeAsync("SetOk", new object[] {
                        sessionId,
                        packageId}, this.SetOkOperationCompleted, userState);
        }
        
        private void OnSetOkOperationCompleted(object arg) {
            if ((this.SetOkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetOkCompleted(this, new SetOkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:IntegrationServices/GetUpdates", RequestNamespace="urn:IntegrationServices", ResponseNamespace="urn:IntegrationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetUpdates(string sessionId, string packageId, int part) {
            object[] results = this.Invoke("GetUpdates", new object[] {
                        sessionId,
                        packageId,
                        part});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetUpdatesAsync(string sessionId, string packageId, int part) {
            this.GetUpdatesAsync(sessionId, packageId, part, null);
        }
        
        /// <remarks/>
        public void GetUpdatesAsync(string sessionId, string packageId, int part, object userState) {
            if ((this.GetUpdatesOperationCompleted == null)) {
                this.GetUpdatesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUpdatesOperationCompleted);
            }
            this.InvokeAsync("GetUpdates", new object[] {
                        sessionId,
                        packageId,
                        part}, this.GetUpdatesOperationCompleted, userState);
        }
        
        private void OnGetUpdatesOperationCompleted(object arg) {
            if ((this.GetUpdatesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUpdatesCompleted(this, new GetUpdatesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:IntegrationServices/GetObjectMeta", RequestNamespace="urn:IntegrationServices", ResponseNamespace="urn:IntegrationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetObjectMeta(string sessionId, string objectCode) {
            object[] results = this.Invoke("GetObjectMeta", new object[] {
                        sessionId,
                        objectCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetObjectMetaAsync(string sessionId, string objectCode) {
            this.GetObjectMetaAsync(sessionId, objectCode, null);
        }
        
        /// <remarks/>
        public void GetObjectMetaAsync(string sessionId, string objectCode, object userState) {
            if ((this.GetObjectMetaOperationCompleted == null)) {
                this.GetObjectMetaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetObjectMetaOperationCompleted);
            }
            this.InvokeAsync("GetObjectMeta", new object[] {
                        sessionId,
                        objectCode}, this.GetObjectMetaOperationCompleted, userState);
        }
        
        private void OnGetObjectMetaOperationCompleted(object arg) {
            if ((this.GetObjectMetaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetObjectMetaCompleted(this, new GetObjectMetaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:IntegrationServices/GetObjectList", RequestNamespace="urn:IntegrationServices", ResponseNamespace="urn:IntegrationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetObjectList(string sessionId, bool fieldsInclude) {
            object[] results = this.Invoke("GetObjectList", new object[] {
                        sessionId,
                        fieldsInclude});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetObjectListAsync(string sessionId, bool fieldsInclude) {
            this.GetObjectListAsync(sessionId, fieldsInclude, null);
        }
        
        /// <remarks/>
        public void GetObjectListAsync(string sessionId, bool fieldsInclude, object userState) {
            if ((this.GetObjectListOperationCompleted == null)) {
                this.GetObjectListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetObjectListOperationCompleted);
            }
            this.InvokeAsync("GetObjectList", new object[] {
                        sessionId,
                        fieldsInclude}, this.GetObjectListOperationCompleted, userState);
        }
        
        private void OnGetObjectListOperationCompleted(object arg) {
            if ((this.GetObjectListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetObjectListCompleted(this, new GetObjectListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:IntegrationServices/GetObjectHistory", RequestNamespace="urn:IntegrationServices", ResponseNamespace="urn:IntegrationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetObjectHistory(string sessionId, string objectCode, string primaryKey, string fieldName, string beginDateTime, string endDateTime) {
            object[] results = this.Invoke("GetObjectHistory", new object[] {
                        sessionId,
                        objectCode,
                        primaryKey,
                        fieldName,
                        beginDateTime,
                        endDateTime});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetObjectHistoryAsync(string sessionId, string objectCode, string primaryKey, string fieldName, string beginDateTime, string endDateTime) {
            this.GetObjectHistoryAsync(sessionId, objectCode, primaryKey, fieldName, beginDateTime, endDateTime, null);
        }
        
        /// <remarks/>
        public void GetObjectHistoryAsync(string sessionId, string objectCode, string primaryKey, string fieldName, string beginDateTime, string endDateTime, object userState) {
            if ((this.GetObjectHistoryOperationCompleted == null)) {
                this.GetObjectHistoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetObjectHistoryOperationCompleted);
            }
            this.InvokeAsync("GetObjectHistory", new object[] {
                        sessionId,
                        objectCode,
                        primaryKey,
                        fieldName,
                        beginDateTime,
                        endDateTime}, this.GetObjectHistoryOperationCompleted, userState);
        }
        
        private void OnGetObjectHistoryOperationCompleted(object arg) {
            if ((this.GetObjectHistoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetObjectHistoryCompleted(this, new GetObjectHistoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:IntegrationServices/GetDocumentMeta", RequestNamespace="urn:IntegrationServices", ResponseNamespace="urn:IntegrationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDocumentMeta(string sessionId, string objectCode, string primaryKey) {
            object[] results = this.Invoke("GetDocumentMeta", new object[] {
                        sessionId,
                        objectCode,
                        primaryKey});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDocumentMetaAsync(string sessionId, string objectCode, string primaryKey) {
            this.GetDocumentMetaAsync(sessionId, objectCode, primaryKey, null);
        }
        
        /// <remarks/>
        public void GetDocumentMetaAsync(string sessionId, string objectCode, string primaryKey, object userState) {
            if ((this.GetDocumentMetaOperationCompleted == null)) {
                this.GetDocumentMetaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDocumentMetaOperationCompleted);
            }
            this.InvokeAsync("GetDocumentMeta", new object[] {
                        sessionId,
                        objectCode,
                        primaryKey}, this.GetDocumentMetaOperationCompleted, userState);
        }
        
        private void OnGetDocumentMetaOperationCompleted(object arg) {
            if ((this.GetDocumentMetaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDocumentMetaCompleted(this, new GetDocumentMetaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:IntegrationServices/GetDocumentData", RequestNamespace="urn:IntegrationServices", ResponseNamespace="urn:IntegrationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetDocumentData(string sessionId, string objectCode, string primaryKey, string documentId) {
            object[] results = this.Invoke("GetDocumentData", new object[] {
                        sessionId,
                        objectCode,
                        primaryKey,
                        documentId});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetDocumentDataAsync(string sessionId, string objectCode, string primaryKey, string documentId) {
            this.GetDocumentDataAsync(sessionId, objectCode, primaryKey, documentId, null);
        }
        
        /// <remarks/>
        public void GetDocumentDataAsync(string sessionId, string objectCode, string primaryKey, string documentId, object userState) {
            if ((this.GetDocumentDataOperationCompleted == null)) {
                this.GetDocumentDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDocumentDataOperationCompleted);
            }
            this.InvokeAsync("GetDocumentData", new object[] {
                        sessionId,
                        objectCode,
                        primaryKey,
                        documentId}, this.GetDocumentDataOperationCompleted, userState);
        }
        
        private void OnGetDocumentDataOperationCompleted(object arg) {
            if ((this.GetDocumentDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDocumentDataCompleted(this, new GetDocumentDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:IntegrationServices/SetUpdates", RequestNamespace="urn:IntegrationServices", ResponseNamespace="urn:IntegrationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetUpdates(string sessionId, string objectCode, string packageId, int part) {
            this.Invoke("SetUpdates", new object[] {
                        sessionId,
                        objectCode,
                        packageId,
                        part});
        }
        
        /// <remarks/>
        public void SetUpdatesAsync(string sessionId, string objectCode, string packageId, int part) {
            this.SetUpdatesAsync(sessionId, objectCode, packageId, part, null);
        }
        
        /// <remarks/>
        public void SetUpdatesAsync(string sessionId, string objectCode, string packageId, int part, object userState) {
            if ((this.SetUpdatesOperationCompleted == null)) {
                this.SetUpdatesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetUpdatesOperationCompleted);
            }
            this.InvokeAsync("SetUpdates", new object[] {
                        sessionId,
                        objectCode,
                        packageId,
                        part}, this.SetUpdatesOperationCompleted, userState);
        }
        
        private void OnSetUpdatesOperationCompleted(object arg) {
            if ((this.SetUpdatesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetUpdatesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:IntegrationServices/GetPackages", RequestNamespace="urn:IntegrationServices", ResponseNamespace="urn:IntegrationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetPackages(string sessionId, string packageId, int begin, int count) {
            object[] results = this.Invoke("GetPackages", new object[] {
                        sessionId,
                        packageId,
                        begin,
                        count});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPackagesAsync(string sessionId, string packageId, int begin, int count) {
            this.GetPackagesAsync(sessionId, packageId, begin, count, null);
        }
        
        /// <remarks/>
        public void GetPackagesAsync(string sessionId, string packageId, int begin, int count, object userState) {
            if ((this.GetPackagesOperationCompleted == null)) {
                this.GetPackagesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPackagesOperationCompleted);
            }
            this.InvokeAsync("GetPackages", new object[] {
                        sessionId,
                        packageId,
                        begin,
                        count}, this.GetPackagesOperationCompleted, userState);
        }
        
        private void OnGetPackagesOperationCompleted(object arg) {
            if ((this.GetPackagesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPackagesCompleted(this, new GetPackagesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:IntegrationServices/GetPackageMD5", RequestNamespace="urn:IntegrationServices", ResponseNamespace="urn:IntegrationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetPackageMD5(string sessionId, string packageId) {
            object[] results = this.Invoke("GetPackageMD5", new object[] {
                        sessionId,
                        packageId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPackageMD5Async(string sessionId, string packageId) {
            this.GetPackageMD5Async(sessionId, packageId, null);
        }
        
        /// <remarks/>
        public void GetPackageMD5Async(string sessionId, string packageId, object userState) {
            if ((this.GetPackageMD5OperationCompleted == null)) {
                this.GetPackageMD5OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPackageMD5OperationCompleted);
            }
            this.InvokeAsync("GetPackageMD5", new object[] {
                        sessionId,
                        packageId}, this.GetPackageMD5OperationCompleted, userState);
        }
        
        private void OnGetPackageMD5OperationCompleted(object arg) {
            if ((this.GetPackageMD5Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPackageMD5Completed(this, new GetPackageMD5CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetSessionIdCompletedEventHandler(object sender, GetSessionIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSessionIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSessionIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetPackageMetaCompletedEventHandler(object sender, GetPackageMetaCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPackageMetaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPackageMetaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void CreatePackageCompletedEventHandler(object sender, CreatePackageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreatePackageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreatePackageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetPackageCompletedEventHandler(object sender, GetPackageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPackageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPackageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SetOkCompletedEventHandler(object sender, SetOkCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetOkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetOkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetUpdatesCompletedEventHandler(object sender, GetUpdatesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUpdatesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUpdatesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetObjectMetaCompletedEventHandler(object sender, GetObjectMetaCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetObjectMetaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetObjectMetaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetObjectListCompletedEventHandler(object sender, GetObjectListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetObjectListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetObjectListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetObjectHistoryCompletedEventHandler(object sender, GetObjectHistoryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetObjectHistoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetObjectHistoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetDocumentMetaCompletedEventHandler(object sender, GetDocumentMetaCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDocumentMetaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDocumentMetaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetDocumentDataCompletedEventHandler(object sender, GetDocumentDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDocumentDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDocumentDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SetUpdatesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetPackagesCompletedEventHandler(object sender, GetPackagesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPackagesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPackagesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetPackageMD5CompletedEventHandler(object sender, GetPackageMD5CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPackageMD5CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPackageMD5CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591