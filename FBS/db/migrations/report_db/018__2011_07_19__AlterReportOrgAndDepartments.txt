-- =========================================================================
-- Запись информации о текущей миграции в лог
insert into Migrations(MigrationVersion, MigrationName) values (18, '018__2011_07_19__AlterReportOrgAndDepartments')
-- =========================================================================
GO

ALTER procedure [dbo].[ReportConsolidatedOrg]
    @ReportType int, -- тип отчета (0 - на дату, 1 - нарастающим итогом)
    @FactDate datetime, -- дата, на которую формируется отчет
    @FDId int,
    @RegionId int,
    @OrgType int,
    @OrgKind int,
    @IsPrivate int,
    @OrgName nvarchar(1000),
    @IsFilial int,
    @IsAccredited int,
    @DepartmentId int,
    @INN_OGRN nvarchar(13),
    @IsRegister int, -- подана ли заявка на регистрацию
    @AccountsCount nvarchar(10), -- количество пользователей
    @ActivatedAccounts nvarchar(10), -- пользователей активировано
    @UniqueChecks nvarchar(10), -- уникальных проверок всего
    @Incorrect nvarchar(10), -- неправильных проверок
    @GroupField nvarchar(25) --тип группировки
as
begin

declare 
	@sql nvarchar(4000),
    @daySql nvarchar(4000),
    @daySqlFilial nvarchar(Max),
    @periodSql nvarchar(4000),
    @periodSqlFilial nvarchar(Max)

set @daySql =
N'
select
	O.FDName,
    O.RegionName,
    O.OrgTypeName,
    O.OrgKindName,
    O.IsPrivate,
    O.ShortName,
    O.FullName,
    O.MainId,
    O.IsAccredited,
    O.DepartmentId,
    (select ORG.ShortName from Organizations ORG where ORG.OrgId = O.DepartmentId) DepartmentName,
    O.INN,
    O.OGRN,
    O.ModelName, ---
    O.CNFBFullTime,
    O.CNFBEvening,
    O.CNFBPostal,
    O.CNPayFullTime,
    O.CNPayEvening,
    O.CNPayPostal,
    PA.FirstCheck,
    PA.LastCheck,
    coalesce(PA.UniqueChecks ,0) UniqueChecks,  ---
    coalesce(PA.UniqueByCertNumber, 0) UniqueByCertNumber,
    coalesce(PA.UniqueByPassport, 0) UniqueByPassport,
    coalesce(PA.UniqueByTypoNumber, 0) UniqueByTypoNumber,
    coalesce(PA.UniqueInteractive, 0) UniqueInteractive,
    coalesce(PA.ByCertNumber, 0) ByCertNumber,
    coalesce(PA.ByPassport, 0) ByPassport,
    coalesce(PA.ByTypoNumber, 0) ByTypoNumber,
    coalesce(PA.[Interactive], 0) [Interactive],
    coalesce(PA.Batch, 0) Batch, ---
    PA.FirstActivated,
    PA.LastActivated,
    PA.FirstRegistered,
    PA.LastRegistered,
    coalesce(PA.AccountsCount, 0) AccountsCount, ---
    coalesce(PA.ActivatedAccounts, 0) ActivatedAccounts, ---
    coalesce(PA.AccountsInConsideration, 0) AccountsInConsideration,
    coalesce(PA.DeactivatedAccounts, 0) DeactivatedAccounts,
    coalesce(PA.AccountsOnRegistration, 0) AccountsOnRegistration,
    coalesce(PA.AccountsOnRevision, 0) AccountsOnRevision
from
	Organizations O
    left join ByDayOrgAggregates PA on PA.OrgId = O.OrgId and PA.FactDate = @FactDate 
where
	1 = 1
'


set @daySqlFilial =
'
select
	O.FDName,
    O.RegionName,
    O.OrgTypeName,
    O.OrgKindName,
    O.IsPrivate,
    O.ShortName,
    O.FullName,
    O.MainId,
    O.IsAccredited,
    O.DepartmentId,
    (select ORG.ShortName from Organizations ORG where ORG.OrgId = O.DepartmentId) DepartmentName,
    O.INN,
    O.OGRN,
    O.ModelName,
    O.CNFBFullTime + O2.CNFBFullTime CNFBFullTime,
    O.CNFBEvening + O2.CNFBEvening CNFBEvening,
    O.CNFBPostal + O2.CNFBPostal CNFBPostal,
    O.CNPayFullTime + O2.CNPayFullTime CNPayFullTime,
    O.CNPayEvening + O2.CNPayEvening CNPayEvening,
    O.CNPayPostal + O2.CNPayPostal CNPayPostal,
    PA.FirstCheck,
    PA.LastCheck,
    coalesce(PA.UniqueChecks ,0) + O2.UniqueChecks UniqueChecks,
    coalesce(PA.UniqueByCertNumber, 0) + O2.UniqueByCertNumber UniqueByCertNumber,
    coalesce(PA.UniqueByPassport, 0) + O2.UniqueByPassport UniqueByPassport,
    coalesce(PA.UniqueByTypoNumber, 0) + O2.UniqueByTypoNumber UniqueByTypoNumber,
    coalesce(PA.UniqueInteractive, 0) + O2.UniqueInteractive UniqueInteractive,
    coalesce(PA.ByCertNumber, 0) + O2.ByCertNumber ByCertNumber,
    coalesce(PA.ByPassport, 0) + O2.ByPassport ByPassport,
    coalesce(PA.ByTypoNumber, 0) + O2.ByTypoNumber ByTypoNumber,
    coalesce(PA.[Interactive], 0) + O2.[Interactive] [Interactive],
    coalesce(PA.Batch, 0) + O2.Batch Batch,
    PA.FirstActivated,
    PA.LastActivated,
    PA.FirstRegistered,
    PA.LastRegistered,
    coalesce(PA.AccountsCount, 0) + O2.AccountsCount AccountsCount,
	coalesce(PA.ActivatedAccounts, 0) + O2.ActivatedAccounts ActivatedAccounts,
    coalesce(PA.AccountsInConsideration, 0) +O2.AccountsInConsideration AccountsInConsideration,
    coalesce(PA.DeactivatedAccounts, 0) + O2.DeactivatedAccounts DeactivatedAccounts,
    coalesce(PA.AccountsOnRegistration, 0) + O2.AccountsOnRegistration AccountsOnRegistration,
    coalesce(PA.AccountsOnRevision, 0) + O2.AccountsOnRevision AccountsOnRevision
from
	Organizations O
	left join ByDayOrgAggregates PA on PA.OrgId = O.OrgId and PA.FactDate = @FactDate
	left join 
	(
	select
		OFil.MainId,
		sum(OFil.CNFBFullTime) CNFBFullTime,
		sum(OFil.CNFBEvening) CNFBEvening,
		sum(OFil.CNFBPostal) CNFBPostal,
		sum(OFil.CNPayFullTime) CNPayFullTime,
		sum(OFil.CNPayEvening) CNPayEvening,
		sum(OFil.CNPayPostal) CNPayPostal,
		min(PA.FirstCheck) FirstCheck,
		max(PA.LastCheck) LastCheck,
		sum(coalesce(PA.UniqueChecks ,0)) UniqueChecks,
		sum(coalesce(PA.UniqueByCertNumber, 0)) UniqueByCertNumber,
		sum(coalesce(PA.UniqueByPassport, 0)) UniqueByPassport,
		sum(coalesce(PA.UniqueByTypoNumber, 0)) UniqueByTypoNumber,
		sum(coalesce(PA.UniqueInteractive, 0)) UniqueInteractive,
		sum(coalesce(PA.ByCertNumber, 0)) ByCertNumber,
		sum(coalesce(PA.ByPassport, 0)) ByPassport,
		sum(coalesce(PA.ByTypoNumber, 0)) ByTypoNumber,
		sum(coalesce(PA.[Interactive], 0)) [Interactive],
		sum(coalesce(PA.Batch,0)) Batch,
		min(PA.FirstActivated) FirstActivated,
		max(PA.LastActivated) LastActivated,
		min(PA.FirstRegistered) FirstRegistered,
		max(PA.LastRegistered) LastRegistered,
		sum(coalesce(PA.AccountsCount, 0)) AccountsCount,
		sum(coalesce(PA.ActivatedAccounts, 0)) ActivatedAccounts,
		sum(coalesce(PA.AccountsInConsideration, 0)) AccountsInConsideration,
		sum(coalesce(PA.DeactivatedAccounts, 0)) DeactivatedAccounts,
		sum(coalesce(PA.AccountsOnRegistration, 0)) AccountsOnRegistration,
		sum(coalesce(PA.AccountsOnRevision, 0)) AccountsOnRevision
	from
		Organizations OFil
		left join  ByDayOrgAggregates PA on PA.OrgId = OFil.OrgId and PA.FactDate = @FactDate
	where OFil.MainId is not null
	group by OFil.MainId
	) O2 on O2.MainId = O.OrgId
where
	O.MainId is null
'

set @periodSql =
N'
select
	O.FDName,
    O.RegionName,
    O.OrgTypeName,
    O.OrgKindName,
    O.IsPrivate,
    O.ShortName,
    O.FullName,
    O.MainId,
    O.IsAccredited,
    O.DepartmentId,
    (select ORG.ShortName from Organizations ORG where ORG.OrgId = O.DepartmentId) DepartmentName,
    O.INN,
    O.OGRN,
    O.ModelName, ---
    O.CNFBFullTime,
    O.CNFBEvening,
    O.CNFBPostal,
    O.CNPayFullTime,
    O.CNPayEvening,
    O.CNPayPostal,
    PA.FirstCheck,
    PA.LastCheck,
    coalesce(PA.UniqueChecks ,0) UniqueChecks,  ---
    coalesce(PA.UniqueByCertNumber, 0) UniqueByCertNumber,
    coalesce(PA.UniqueByPassport, 0) UniqueByPassport,
    coalesce(PA.UniqueByTypoNumber, 0) UniqueByTypoNumber,
    coalesce(PA.UniqueInteractive, 0) UniqueInteractive,
    coalesce(PA.ByCertNumber, 0) ByCertNumber,
    coalesce(PA.ByPassport, 0) ByPassport,
    coalesce(PA.ByTypoNumber, 0) ByTypoNumber,
    coalesce(PA.[Interactive], 0) [Interactive],
    coalesce(PA.Batch, 0) Batch, ---
    PA.FirstActivated,
    PA.LastActivated,
    PA.FirstRegistered,
    PA.LastRegistered,
    coalesce(PA.AccountsCount, 0) AccountsCount, ---
    coalesce(PA.ActivatedAccounts, 0) ActivatedAccounts, ---
    coalesce(PA.AccountsInConsideration, 0) AccountsInConsideration,
    coalesce(PA.DeactivatedAccounts, 0) DeactivatedAccounts,
    coalesce(PA.AccountsOnRegistration, 0) AccountsOnRegistration,
    coalesce(PA.AccountsOnRevision, 0) AccountsOnRevision
from
	Organizations O
    left join 
    (
    select 
    	PA.OrgId,
        PA.FactDate,
	    PA.FirstCheck,
	    PA.LastCheck,
	    PA.UniqueByCertNumber,
	    PA.UniqueByPassport,
	    PA.UniqueByTypoNumber,
	    PA.UniqueInteractive,
	    PA.ByCertNumber,
	    PA.ByPassport,
	    PA.ByTypoNumber,
	    PA.[Interactive],
	    PA.FirstActivated,
	    PA.LastActivated,
	    PA.FirstRegistered,
	    PA.LastRegistered,
	    PA.AccountsInConsideration,
	    PA.DeactivatedAccounts,
	    PA.AccountsOnRegistration,
	    PA.AccountsOnRevision,
        PA.AccountsCount,
        PA.ActivatedAccounts,
        PA.UniqueChecks,
        PA.Incorrect,
        PA.Batch
    from
	    ByPeriodOrgAggregates PA
	    inner join 
	    (
		select
			PA.OrgId,
		    max(PA.FactDate) FactDate
		from
			ByPeriodOrgAggregates PA
		where
			PA.FactDate <= @FactDate and Year(PA.FactDate) = Year(@FactDate)
		group by
			PA.OrgId
	    ) A on A.OrgId = PA.OrgId and A.FactDate = PA.FactDate
    ) PA on PA.OrgId = O.OrgId
where
	1 = 1
'

set @periodSqlFilial = 
N'select
	O.FDName,
	O.RegionName,
	O.OrgTypeName,
	O.OrgKindName,
	O.IsPrivate,
	O.ShortName,
	O.FullName,
	O.MainId,
	O.IsAccredited,
	O.DepartmentId,
    (select ORG.ShortName from Organizations ORG where ORG.OrgId = O.DepartmentId) DepartmentName,
    O.INN,
    O.OGRN,
    O.ModelName,
    sum(O.CNFBFullTime) CNFBFullTime,
	sum(O.CNFBEvening) CNFBEvening,
	sum(O.CNFBPostal) CNFBPostal,
	sum(O.CNPayFullTime) CNPayFullTime,
	sum(O.CNPayEvening) CNPayEvening,
	sum(O.CNPayPostal) CNPayPostal,
	min(PA.FirstCheck) FirstCheck,
	max(PA.LastCheck) LastCheck,
	sum(coalesce(PA.UniqueChecks ,0)) UniqueChecks,
	sum(coalesce(PA.UniqueByCertNumber, 0)) UniqueByCertNumber,
	sum(coalesce(PA.UniqueByPassport, 0)) UniqueByPassport,
	sum(coalesce(PA.UniqueByTypoNumber, 0)) UniqueByTypoNumber,
	sum(coalesce(PA.UniqueInteractive, 0)) UniqueInteractive,
	sum(coalesce(PA.ByCertNumber, 0)) ByCertNumber,
	sum(coalesce(PA.ByPassport, 0)) ByPassport,
	sum(coalesce(PA.ByTypoNumber, 0)) ByTypoNumber,
	sum(coalesce(PA.[Interactive], 0)) [Interactive],
	sum(coalesce(PA.Batch,0)) Batch,
	min(PA.FirstActivated) FirstActivated,
	max(PA.LastActivated) LastActivated,
	min(PA.FirstRegistered) FirstRegistered,
	max(PA.LastRegistered) LastRegistered,
	sum(coalesce(PA.AccountsCount, 0)) AccountsCount,
	sum(coalesce(PA.ActivatedAccounts, 0)) ActivatedAccounts,
	sum(coalesce(PA.AccountsInConsideration, 0)) AccountsInConsideration,
	sum(coalesce(PA.DeactivatedAccounts, 0)) DeactivatedAccounts,
	sum(coalesce(PA.AccountsOnRegistration, 0)) AccountsOnRegistration,
	sum(coalesce(PA.AccountsOnRevision, 0)) AccountsOnRevision
from
	Organizations O
	inner join
	(
		select 
			O.OrgId,
			O.OrgId as MainId
		from 
			Organizations O
		where
			O.MainId is null
		union all
		select 
			O.OrgId, O.MainId
		from
			Organizations O
		where
		O.MainId is not null
	) B on B.MainId = O.OrgId
    left join 
    (select 
    	PA.OrgId,
        PA.FactDate,
	    PA.FirstCheck,
	    PA.LastCheck,
	    PA.UniqueByCertNumber,
	    PA.UniqueByPassport,
	    PA.UniqueByTypoNumber,
	    PA.UniqueInteractive,
	    PA.ByCertNumber,
	    PA.ByPassport,
	    PA.ByTypoNumber,
	    PA.[Interactive],
	    PA.FirstActivated,
	    PA.LastActivated,
	    PA.FirstRegistered,
	    PA.LastRegistered,
	    PA.AccountsInConsideration,
	    PA.DeactivatedAccounts,
	    PA.AccountsOnRegistration,
	    PA.AccountsOnRevision,
        PA.AccountsCount,
        PA.ActivatedAccounts,
        PA.UniqueChecks,
        PA.Incorrect,
        PA.Batch
    from
	    ByPeriodOrgAggregates PA
	    inner join 
	    (select
			PA.OrgId,
		    max(PA.FactDate) FactDate
		from
			ByPeriodOrgAggregates PA
		where
			PA.FactDate <= @FactDate and Year(PA.FactDate) = Year(@FactDate)
		group by
			PA.OrgId
	    ) A on A.OrgId = PA.OrgId and A.FactDate = PA.FactDate
    ) PA on PA.OrgId = O.OrgId
where 1 = 1 '

if (@ReportType = 0)
begin
	if (@GroupField = 'Filial')
		set @sql = @daySqlFilial
	else 
		set @sql = @daySql
end
else begin
	if (@GroupField = 'Filial')
		set @sql = @periodSqlFilial
	else
		set @sql = @periodSql
end

--print @sql

-- Федеральный округ
if (@FDId != -1) 
begin 
	set @sql = @sql + ' and O.FDId = @FDId '
end

-- Субъект РФ
if (@RegionId != -1) 
begin 
	set @sql = @sql + ' and O.RegionId = @RegionId '
end

-- Тип образовательного учреждения
if (@OrgType != -1) 
begin 
	set @sql = @sql + ' and O.OrgType = @OrgType '
end

-- Вид образовательного учреждения
if (@OrgKind != -1) 
begin 
	set @sql = @sql + ' and O.OrgKind = @OrgKind '
end

-- Организационно-правовая форма
if (@IsPrivate != -1) 
begin 
	set @sql = @sql + ' and O.IsPrivate = @IsPrivate '
end

-- Название организации
if (@OrgName is not null and LEN(@OrgName) != 0) 
begin 
	set @OrgName = '%' + @OrgName + '%'
	set @sql = @sql + ' and (O.ShortName like @OrgName or O.FullName like @OrgName) '
end

-- Является ли филиалом
if (@IsFilial != -1) 
begin 
	if (@IsFilial = 1)
    begin
		set @sql = @sql + ' and O.MainId is not null '
    end
    else begin
		set @sql = @sql + ' and O.MainId is null '
    end
end

-- Признак аккредитации
if (@IsAccredited != -1) 
begin 
	set @sql = @sql + ' and O.IsAccredited = @IsAccredited '
end

-- Учредитель ОУ
if (@DepartmentId != -1) 
begin 
	set @sql = @sql + ' and O.DepartmentId = @DepartmentId '
end

-- ИНН/ОГРН
if (@INN_OGRN is not null and LEN(@INN_OGRN) != 0) 
begin 
	set @sql = @sql + ' and (O.INN = @INN_OGRN or O.OGRN = @INN_OGRN) '
end

-- Подана ли заявка на регистрацию
if (@IsRegister != -1) 
begin 
	if (@IsRegister = 1)
    begin
		set @sql = @sql + ' and O.RegisterDate <= @FactDate '
    end
    else begin
		set @sql = @sql + ' and O.RegisterDate is null '
    end
end


-- Количество пользователей
-- Это потенциальная дырка для sql injection. Надо проверять строку с выражением
if (@AccountsCount is not null and LEN(@AccountsCount) != 0)
begin
	set @sql = @sql + ' and PA.AccountsCount = ' + @AccountsCount + ' '
end


-- Пользователей активировано
-- Это потенциальная дырка для sql injection. Надо проверять строку с выражением
if (@ActivatedAccounts is not null and LEN(@ActivatedAccounts) != 0)
begin
	set @sql = @sql + ' and PA.ActivatedAccounts = ' + @ActivatedAccounts + ' '
end

-- Уникальных проверок всего
-- Это потенциальная дырка для sql injection. Надо проверять строку с выражением
if (@UniqueChecks is not null and LEN(@UniqueChecks) != 0)
begin
	set @sql = @sql + ' and PA.UniqueChecks = ' + @UniqueChecks + ' '
end

-- Неправильных проверок
-- Это потенциальная дырка для sql injection. Надо проверять строку с выражением
if (@Incorrect is not null and LEN(@Incorrect) != 0)
begin
	set @sql = @sql + ' and PA.Incorrect = ' + @Incorrect + ' '
end

if @GroupField = 'Filial' and @ReportType <> 0
	set @sql = @sql +
	'group by B.MainId,O.OrgId, O.MainId, O.FDName,O.RegionName,O.OrgTypeName,O.OrgKindName,O.IsPrivate,O.ShortName,
	O.FullName,O.IsAccredited,O.DepartmentId,O.INN,O.OGRN, O.ModelName '  
set @sql = @sql + 
	' order by	
	case when O.MainId is null then O.OrgId else O.MainId end, O.MainId, O.FullName'


execute sp_executesql 
	@sql,
    N'
    @FactDate datetime,
    @FDId int,
    @RegionId int,
    @OrgType int,
    @OrgKind int,
    @IsPrivate int,
    @OrgName nvarchar(1000),
    @IsFilial int,
    @IsAccredited int,
    @DepartmentId int,
    @INN_OGRN nvarchar(13)
    ',
    @FactDate,
    @FDId,
    @RegionId,
    @OrgType,
    @OrgKind,
    @IsPrivate,
    @OrgName,
    @IsFilial,
    @IsAccredited,
    @DepartmentId,
    @INN_OGRN
        
end
GO

ALTER procedure [dbo].[ReportConsolidatedOrgPeriods]
    @ReportType int, -- тип отчета (0 - на дату, 1 - нарастающим итогом)
	@FactDateBegin datetime,
	@FactDateFinish datetime,
	@FDId int,
	@RegionId int,
	@OrgType int,
    @OrgKind int,
    @IsPrivate int,
    @OrgName nvarchar(1000),
    @IsFilial int,
    @IsAccredited int,
    @DepartmentId int,
    @INN_OGRN nvarchar(13),
    @IsRegister int, -- подана ли заявка на регистрацию
    @AccountsCount nvarchar(10), -- количество пользователей
    @ActivatedAccounts nvarchar(10), -- пользователей активировано
    @UniqueChecks nvarchar(10), -- уникальных проверок всего
    @Incorrect nvarchar(10), -- неправильных проверок
    @GroupField nvarchar(25) --поле группировки
as
begin
declare
	@sql nvarchar(4000),
    @daySql nvarchar(4000),
    @daySqlFilial nvarchar(Max),
    @periodSql nvarchar(4000),
    @periodSqlFilial nvarchar(Max)
set @daySql = 
N'select
	O.OrgId,
	O.RegionId,
	O.FullName,
	O.RegionName,
	O.OrgTypeName,
	O.OrgKindName,
	O.IsPrivate,
	O.DepartmentId,
    (select ORG.ShortName from Organizations ORG where ORG.OrgId = O.DepartmentId) DepartmentName,
	coalesce(PA.AccountsCount, 0) AccountsCount,
	coalesce(PA.ActivatedAccounts, 0) ActivatedAccounts,
	PA.FirstActivated,
    PA.LastActivated,
    PA.FirstRegistered,
    PA.LastRegistered,
    coalesce(PA.AccountsInConsideration, 0) AccountsInConsideration,
    coalesce(PA.DeactivatedAccounts, 0) DeactivatedAccounts,
    coalesce(PA.AccountsOnRegistration, 0) AccountsOnRegistration,
    coalesce(PA.AccountsOnRevision, 0) AccountsOnRevision,
    coalesce(PA.UniqueChecks, 0) UniqueChecks,
	coalesce(PA.UniqueByCertNumber, 0) UniqueByCertNumber,
    coalesce(PA.UniqueByPassport, 0) UniqueByPassport,
    coalesce(PA.UniqueByTypoNumber, 0) UniqueByTypoNumber,
    coalesce(PA.UniqueInteractive, 0) UniqueInteractive,
    coalesce(PA.Incorrect, 0) Incorrect,
    PA.FirstCheck,
    PA.LastCheck,
    coalesce(PA.ByCertNumber, 0) ByCertNumber,
    coalesce(PA.ByPassport, 0) ByPassport,
    coalesce(PA.ByTypoNumber, 0) ByTypoNumber,
    coalesce(PA.[Interactive], 0) [Interactive],
    @FactDate as FactDate
from
	Organizations O
    left join ByDayOrgAggregates PA on PA.OrgId = O.OrgId and PA.FactDate = @FactDate
    and
	PA.FactDate >= 
		(select
			P.PeriodDate
		from dbo.Periods P
		where
			P.PeriodYear = YEAR(@FactDate))
where
	1 = 1 '
	
set @daySqlFilial =
'select
	O.OrgId,
	O.RegionId,
	O.FullName,
	O.RegionName,
	O.OrgTypeName,
	O.OrgKindName,
	O.IsPrivate,
	O.DepartmentId,
    (select ORG.ShortName from Organizations ORG where ORG.OrgId = O.DepartmentId) DepartmentName,
	coalesce(PA.AccountsCount, 0) + O2.AccountsCount AccountsCount,
	coalesce(PA.ActivatedAccounts, 0) + O2.ActivatedAccounts ActivatedAccounts,
	(case when PA.FirstActivated > O2.FirstActivated then O2.FirstActivated else PA.FirstActivated end) FirstActivated,
    (case when PA.LastActivated > O2.LastActivated then PA.LastActivated else O2.LastActivated end) LastActivated,
    (case when PA.FirstRegistered > O2.FirstRegistered then O2.FirstRegistered else PA.FirstRegistered end) FirstRegistered,
    (case when PA.LastRegistered > O2.LastRegistered then PA.LastRegistered else O2.LastRegistered end) LastRegistered,
    coalesce(PA.AccountsInConsideration, 0) + O2.AccountsInConsideration AccountsInConsideration,
    coalesce(PA.DeactivatedAccounts, 0) + O2.DeactivatedAccounts DeactivatedAccounts,
    coalesce(PA.AccountsOnRegistration, 0) + O2.AccountsOnRegistration AccountsOnRegistration,
    coalesce(PA.AccountsOnRevision, 0) + O2.AccountsOnRevision AccountsOnRevision,
    coalesce(PA.UniqueChecks, 0) + O2.UniqueChecks UniqueChecks,
	coalesce(PA.UniqueByCertNumber, 0) + O2.UniqueByCertNumber UniqueByCertNumber,
    coalesce(PA.UniqueByPassport, 0) + O2.UniqueByPassport UniqueByPassport,
    coalesce(PA.UniqueByTypoNumber, 0) + O2.UniqueByTypoNumber UniqueByTypoNumber,
    coalesce(PA.UniqueInteractive, 0) + O2.UniqueInteractive UniqueInteractive,
    coalesce(PA.Incorrect, 0) + O2.Incorrect Incorrect,
    (case when PA.FirstCheck > O2.FirstCheck then O2.FirstCheck else PA.FirstCheck end) FirstCheck,
    (case when PA.LastCheck > O2.LastCheck then PA.LastCheck else O2.LastCheck end) LastCheck,
    coalesce(PA.ByCertNumber, 0) + O2.ByCertNumber ByCertNumber,
    coalesce(PA.ByPassport, 0) + O2.ByPassport ByPassport,
    coalesce(PA.ByTypoNumber, 0) + O2.ByTypoNumber ByTypoNumber,
    coalesce(PA.[Interactive], 0) + O2.Interactive [Interactive],
    @FactDate as FactDate
from
	Organizations O
    left join ByDayOrgAggregates PA on PA.OrgId = O.OrgId and PA.FactDate = @FactDate
    and
	PA.FactDate >= 
		(select
			P.PeriodDate
		from dbo.Periods P
		where
			P.PeriodYear = YEAR(@FactDate))
	left join 
	(select
		OFil.MainId,
		sum(OFil.CNFBFullTime) CNFBFullTime,
		sum(OFil.CNFBEvening) CNFBEvening,
		sum(OFil.CNFBPostal) CNFBPostal,
		sum(OFil.CNPayFullTime) CNPayFullTime,
		sum(OFil.CNPayEvening) CNPayEvening,
		sum(OFil.CNPayPostal) CNPayPostal,
		min(PA.FirstCheck) FirstCheck,
		max(PA.LastCheck) LastCheck,
		sum(coalesce(PA.UniqueChecks ,0)) UniqueChecks,
		sum(coalesce(PA.UniqueByCertNumber, 0)) UniqueByCertNumber,
		sum(coalesce(PA.UniqueByPassport, 0)) UniqueByPassport,
		sum(coalesce(PA.UniqueByTypoNumber, 0)) UniqueByTypoNumber,
		sum(coalesce(PA.UniqueInteractive, 0)) UniqueInteractive,
		sum(coalesce(PA.ByCertNumber, 0)) ByCertNumber,
		sum(coalesce(PA.ByPassport, 0)) ByPassport,
		sum(coalesce(PA.ByTypoNumber, 0)) ByTypoNumber,
		sum(coalesce(PA.[Interactive], 0)) [Interactive],
		sum(coalesce(PA.Incorrect, 0)) Incorrect,
		sum(coalesce(PA.Batch,0)) Batch,
		min(PA.FirstActivated) FirstActivated,
		max(PA.LastActivated) LastActivated,
		min(PA.FirstRegistered) FirstRegistered,
		max(PA.LastRegistered) LastRegistered,
		sum(coalesce(PA.AccountsCount, 0)) AccountsCount,
		sum(coalesce(PA.ActivatedAccounts, 0)) ActivatedAccounts,
		sum(coalesce(PA.AccountsInConsideration, 0)) AccountsInConsideration,
		sum(coalesce(PA.DeactivatedAccounts, 0)) DeactivatedAccounts,
		sum(coalesce(PA.AccountsOnRegistration, 0)) AccountsOnRegistration,
		sum(coalesce(PA.AccountsOnRevision, 0)) AccountsOnRevision
	from
		Organizations OFil
		left join  ByDayOrgAggregates PA on PA.OrgId = OFil.OrgId and PA.FactDate = @FactDate
	where OFil.MainId is not null
	group by OFil.MainId
	) O2 on O2.MainId = O.OrgId
where
	O.MainId is null '
    
set @periodSql =
N'select
	O.OrgId,
	O.RegionId,
    O.FullName,
    O.RegionName,
    O.OrgTypeName,
	O.OrgKindName,
	O.IsPrivate,
	O.DepartmentId,
    (select ORG.ShortName from Organizations ORG where ORG.OrgId = O.DepartmentId) DepartmentName,
	coalesce(PA.AccountsCount, 0) AccountsCount,
	coalesce(PA.ActivatedAccounts, 0) ActivatedAccounts,
	PA.FirstActivated,
    PA.LastActivated,
    PA.FirstRegistered,
    PA.LastRegistered,
    coalesce(PA.AccountsInConsideration, 0) AccountsInConsideration,
    coalesce(PA.DeactivatedAccounts, 0) DeactivatedAccounts,
    coalesce(PA.AccountsOnRegistration, 0) AccountsOnRegistration,
    coalesce(PA.AccountsOnRevision, 0) AccountsOnRevision,
    coalesce(PA.UniqueChecks, 0) UniqueChecks,
	coalesce(PA.UniqueByCertNumber, 0) UniqueByCertNumber,
    coalesce(PA.UniqueByPassport, 0) UniqueByPassport,
    coalesce(PA.UniqueByTypoNumber, 0) UniqueByTypoNumber,
    coalesce(PA.UniqueInteractive, 0) UniqueInteractive,
    coalesce(PA.Incorrect, 0) Incorrect,
    PA.FirstCheck,
    PA.LastCheck,
    coalesce(PA.ByCertNumber, 0) ByCertNumber,
    coalesce(PA.ByPassport, 0) ByPassport,
    coalesce(PA.ByTypoNumber, 0) ByTypoNumber,
    coalesce(PA.[Interactive], 0) [Interactive], 
    @FactDate as FactDate
from
	Organizations O
    left join 
    (
    select 
    	PA.OrgId,
        PA.FactDate,
	    PA.FirstCheck,
	    PA.LastCheck,
	    PA.UniqueByCertNumber,
	    PA.UniqueByPassport,
	    PA.UniqueByTypoNumber,
	    PA.UniqueInteractive,
	    PA.ByCertNumber,
	    PA.ByPassport,
	    PA.ByTypoNumber,
	    PA.[Interactive],
	    PA.FirstActivated,
	    PA.LastActivated,
	    PA.FirstRegistered,
	    PA.LastRegistered,
	    PA.AccountsInConsideration,
	    PA.DeactivatedAccounts,
	    PA.AccountsOnRegistration,
	    PA.AccountsOnRevision,
        PA.AccountsCount,
        PA.ActivatedAccounts,
        PA.UniqueChecks,
        PA.Incorrect
    from
	    ByPeriodOrgAggregates PA
	    inner join 
	    (
		select
			PA.OrgId,
		    max(PA.FactDate) FactDate
		from
			ByPeriodOrgAggregates PA
		where
			PA.FactDate <= @FactDate
			and 
			PA.FactDate >= (select
				P.PeriodDate
			from dbo.Periods P
			where
			P.PeriodYear = YEAR(@FactDate))
		group by
			PA.OrgId
	    ) A on A.OrgId = PA.OrgId and A.FactDate = PA.FactDate
    ) PA on PA.OrgId = O.OrgId
where
	1 = 1 '

set @periodSqlFilial =
'
select
	O.OrgId,
	O.RegionId,
    O.FullName,
    O.RegionName,
    O.OrgTypeName,
	O.OrgKindName,
	O.IsPrivate,
	O.DepartmentId,
    (select ORG.ShortName from Organizations ORG where ORG.OrgId = O.DepartmentId) DepartmentName,
	sum(coalesce(PA.AccountsCount, 0)) AccountsCount,
	sum(coalesce(PA.ActivatedAccounts, 0)) ActivatedAccounts,
	min(PA.FirstActivated) FirstActivated,
    max(PA.LastActivated) LastActivated,
    min(PA.FirstRegistered) FirstRegistered,
    max(PA.LastRegistered) LastRegistered,
    sum(coalesce(PA.AccountsInConsideration, 0)) AccountsInConsideration,
    sum(coalesce(PA.DeactivatedAccounts, 0)) DeactivatedAccounts,
    sum(coalesce(PA.AccountsOnRegistration, 0)) AccountsOnRegistration,
    sum(coalesce(PA.AccountsOnRevision, 0)) AccountsOnRevision,
    sum(coalesce(PA.UniqueChecks, 0)) UniqueChecks,
	sum(coalesce(PA.UniqueByCertNumber, 0)) UniqueByCertNumber,
    sum(coalesce(PA.UniqueByPassport, 0)) UniqueByPassport,
    sum(coalesce(PA.UniqueByTypoNumber, 0)) UniqueByTypoNumber,
    sum(coalesce(PA.UniqueInteractive, 0)) UniqueInteractive,
    sum(coalesce(PA.Incorrect, 0)) Incorrect,
    min(PA.FirstCheck) FirstCheck,
    max(PA.LastCheck) LastCheck,
    sum(coalesce(PA.ByCertNumber, 0)) ByCertNumber,
    sum(coalesce(PA.ByPassport, 0)) ByPassport,
    sum(coalesce(PA.ByTypoNumber, 0)) ByTypoNumber,
    sum(coalesce(PA.[Interactive], 0)) [Interactive], 
    @FactDate as FactDate
from
	Organizations O
	inner join
	(
	select
		O.OrgId,
		(case when O.MainId > 0 then O.MainId else O.OrgId end) MainId
	from Organizations O
	) B on B.MainId = O.OrgId
    left join 
    (
    select 
    	PA.OrgId,
        PA.FactDate,
	    PA.FirstCheck,
	    PA.LastCheck,
	    PA.UniqueByCertNumber,
	    PA.UniqueByPassport,
	    PA.UniqueByTypoNumber,
	    PA.UniqueInteractive,
	    PA.ByCertNumber,
	    PA.ByPassport,
	    PA.ByTypoNumber,
	    PA.[Interactive],
	    PA.FirstActivated,
	    PA.LastActivated,
	    PA.FirstRegistered,
	    PA.LastRegistered,
	    PA.AccountsInConsideration,
	    PA.DeactivatedAccounts,
	    PA.AccountsOnRegistration,
	    PA.AccountsOnRevision,
        PA.AccountsCount,
        PA.ActivatedAccounts,
        PA.UniqueChecks,
        PA.Incorrect
    from
	    ByPeriodOrgAggregates PA
	    inner join 
	    (
		select
			PA.OrgId,
		    max(PA.FactDate) FactDate
		from
			ByPeriodOrgAggregates PA
		where
			PA.FactDate <= @FactDate
			and 
			PA.FactDate >= (select
				P.PeriodDate
			from dbo.Periods P
			where
			P.PeriodYear = YEAR(@FactDate))
		group by
			PA.OrgId
	    ) A on A.OrgId = PA.OrgId and A.FactDate = PA.FactDate
    ) PA on PA.OrgId = O.OrgId
where
	1 = 1 '

if (@ReportType = 0)
begin
	if (@GroupField = 'Filial')
		set @sql = @daySqlFilial
	else 
		set @sql = @daySql
end
else begin
	if (@GroupField = 'Filial')
		set @sql = @periodSqlFilial
	else
		set @sql = @periodSql
end

-- Федеральный округ
if (@FDId != -1) 
begin 
	set @sql = @sql + ' and O.FDId = @FDId '
end

-- Субъект РФ
if (@RegionId != -1) 
begin 
	set @sql = @sql + ' and O.RegionId = @RegionId '
end

-- Тип образовательного учреждения
if (@OrgType != -1) 
begin 
	set @sql = @sql + ' and O.OrgType = @OrgType '
end

-- Вид образовательного учреждения
if (@OrgKind != -1) 
begin 
	set @sql = @sql + ' and O.OrgKind = @OrgKind '
end

-- Организационно-правовая форма
if (@IsPrivate != -1) 
begin 
	set @sql = @sql + ' and O.IsPrivate = @IsPrivate '
end

if (@OrgName is not null and LEN(@OrgName) != 0) 
begin 
	set @OrgName = '%' + @OrgName + '%'
	set @sql = @sql + ' and O.FullName like @OrgName '
end


-- Является ли филиалом
if (@IsFilial != -1) 
begin 
	if (@IsFilial = 1)
    begin
		set @sql = @sql + ' and O.MainId is not null '
    end
    else begin
		set @sql = @sql + ' and O.MainId is null '
    end
end

-- Признак аккредитации
if (@IsAccredited != -1) 
begin 
	set @sql = @sql + ' and O.IsAccredited = @IsAccredited '
end

-- Учредитель ОУ
if (@DepartmentId != -1) 
begin 
	set @sql = @sql + ' and O.DepartmentId = @DepartmentId '
end

-- ИНН/ОГРН
if (@INN_OGRN is not null and LEN(@INN_OGRN) != 0) 
begin 
	set @sql = @sql + ' and (O.INN = @INN_OGRN or O.OGRN = @INN_OGRN) '
end

-- Подана ли заявка на регистрацию
if (@IsRegister != -1) 
begin 
	if (@IsRegister = 1)
    begin
		set @sql = @sql + ' and O.RegisterDate <= @FactDate '
    end
    else begin
		set @sql = @sql + ' and O.RegisterDate is null '
    end
end

-- Количество пользователей
-- Это потенциальная дырка для sql injection. Надо проверять строку с выражением
if (@AccountsCount is not null and LEN(@AccountsCount) != 0)
begin
	set @sql = @sql + ' and PA.AccountsCount = ' + @AccountsCount + ' '
end


-- Пользователей активировано
-- Это потенциальная дырка для sql injection. Надо проверять строку с выражением
if (@ActivatedAccounts is not null and LEN(@ActivatedAccounts) != 0)
begin
	set @sql = @sql + ' and PA.ActivatedAccounts = ' + @ActivatedAccounts + ' '
end

-- Уникальных проверок всего
-- Это потенциальная дырка для sql injection. Надо проверять строку с выражением
if (@UniqueChecks is not null and LEN(@UniqueChecks) != 0)
begin
	set @sql = @sql + ' and PA.UniqueChecks = ' + @UniqueChecks + ' '
end

-- Неправильных проверок
-- Это потенциальная дырка для sql injection. Надо проверять строку с выражением
if (@Incorrect is not null and LEN(@Incorrect) != 0)
begin
	set @sql = @sql + ' and PA.Incorrect = ' + @Incorrect + ' '
end

CREATE TABLE 
	#Table1 (
	OrgId int,
	RegionId int,
    FullName nvarchar(1000),
    RegionName nvarchar(255),
    OrgTypeName nvarchar(30),
	OrgKindName nvarchar(30),
	IsPrivate bit,
	DepartmentId int,
    DepartmentName nvarchar(1000),
	AccountsCount int,
	ActivatedAccounts int,
	FirstActivated datetime,
    LastActivated datetime,
    FirstRegistered datetime,
    LastRegistered datetime,
    AccountsInConsideration int,
    DeactivatedAccounts int,
    AccountsOnRegistration int,
    AccountsOnRevision int,
    UniqueChecks int,
	UniqueByCertNumber int,
    UniqueByPassport int,
    UniqueByTypoNumber int,
    UniqueInteractive int,
    Incorrect int,
    FirstCheck datetime,
    LastCheck datetime,
    ByCertNumber int,
    ByPassport int,
    ByTypoNumber int,
    [Interactive] int, 
    FactDate datetime,
    primary key (OrgId, FactDate)
    )
	
	if @GroupField = 'Filial' and @ReportType <> 0
		set @sql = @sql + ' group by B.MainId, O.RegionId, O.OrgId, O.MainId, O.FDName,O.RegionName,O.OrgTypeName,O.OrgKindName,O.IsPrivate,O.ShortName,
	O.FullName,O.IsAccredited,O.DepartmentId,O.INN,O.OGRN, O.ModelName '
	
	set @sql = 'insert into #Table1 
	select 
	OrgId,
	RegionId,
    FullName,
    RegionName,
	OrgTypeName,
	OrgKindName,
	IsPrivate,
	DepartmentId,
    DepartmentName,
	AccountsCount,
	ActivatedAccounts,
	FirstActivated,
    LastActivated,
    FirstRegistered,
    LastRegistered,
    AccountsInConsideration,
    DeactivatedAccounts,
    AccountsOnRegistration,
    AccountsOnRevision,
    UniqueChecks,
	UniqueByCertNumber,
    UniqueByPassport,
    UniqueByTypoNumber,
    UniqueInteractive,
    Incorrect,
    FirstCheck,
    LastCheck,
    ByCertNumber,
    ByPassport,
    ByTypoNumber,
    [Interactive], 
    FactDate
	from 
	( '+@sql+'
	) T1 '
	
	execute sp_executesql 
	@sql,
    N'
    @FactDate datetime,
    @FDId int,
    @RegionId int,
    @OrgType int,
    @OrgKind int,
    @IsPrivate int,
    @OrgName nvarchar(1000),
    @IsFilial int,
    @IsAccredited int,
    @DepartmentId int,
    @INN_OGRN nvarchar(13)
    ',
    @FactDateBegin,
    @FDId,
    @RegionId,
    @OrgType,
    @OrgKind,
    @IsPrivate,
    @OrgName,
    @IsFilial,
    @IsAccredited,
    @DepartmentId,
    @INN_OGRN
    
	if (@FactDateBegin != @FactDateFinish)
	begin
		execute sp_executesql 
		@sql,
		N'
		@FactDate datetime,
		@FDId int,
		@RegionId int,
		@OrgType int,
		@OrgKind int,
		@IsPrivate int,
		@OrgName nvarchar(1000),
		@IsFilial int,
		@IsAccredited int,
		@DepartmentId int,
		@INN_OGRN nvarchar(13)
		',
		@FactDateFinish,
		@FDId,
		@RegionId,
		@OrgType,
		@OrgKind,
		@IsPrivate,
		@OrgName,
		@IsFilial,
		@IsAccredited,
		@DepartmentId,
		@INN_OGRN
    end
    
    select * from #Table1
    drop table #Table1
end
GO


if exists (select 1
          from sysobjects
          where  id = object_id('SplitInt')
          and type in ('IF', 'FN', 'TF'))
   drop function SplitInt
go


create FUNCTION SplitInt
(
	@RowData nvarchar(2000)
)  
RETURNS @RtnValue table 
(
	RegionId int
) 
AS  
BEGIN
	Declare @SplitOn nvarchar(1)
	Set @SplitOn = ','
	Declare @Cnt int
	Set @Cnt = 1

	While (Charindex(@SplitOn,@RowData)>0)
	Begin
		Insert Into @RtnValue (RegionId)
		Select 
			RegionId = cast(ltrim(rtrim(Substring(@RowData,1,Charindex(@SplitOn,@RowData)-1))) as int)

		Set @RowData = Substring(@RowData,Charindex(@SplitOn,@RowData)+1,len(@RowData))
		Set @Cnt = @Cnt + 1
	End
	
	Insert Into @RtnValue (RegionId)
	Select RegionId = cast(ltrim(rtrim(@RowData)) as int)

	Return
END
GO

alter procedure [dbo].[ReportDepartments] (@currentDate datetime, @regions varchar(250))
as
begin

declare @Departments table 
(
	DepartmentId int null
)

declare @AllRegions int
if (Select count(*) from SplitInt(@regions)
	where exists (select distinct O.RegionId from Organizations O)) =
	(select COUNT(distinct O.RegionId) from Organizations O)
set @AllRegions = 1
else set @AllRegions = 0

if @AllRegions = 1
begin
	insert into @Departments
	select 
		distinct O.DepartmentId
	from
		Organizations O
	where
		O.CreateDate <= @currentDate
	order by DepartmentId desc
end
else begin
	insert into @Departments
	select 
		distinct O.DepartmentId
	from
		Organizations O
		inner join Organizations O1 on O.DepartmentId = O1.OrgId
	where
		O1.RegionId in (select RegionId from SplitInt(@regions))
		and O.CreateDate <= @currentDate
	order by DepartmentId desc
end 

declare @ActivatedUser table
(
	OrgId int,
	ActivatedUsers int
)

insert into @ActivatedUser
select
	O.OrgId,
	count(RL.AccountId)
from Organizations O
	inner join RegistrationLog RL on RL.OrgId = O.OrgId
where 
	RL.AccountStatus = 'activated'
	and RL.UpdateDate between  (select top 1 P.PeriodDate
								from Periods P
								where YEAR(@currentDate) = P.PeriodYear) and @currentDate
group by
	O.OrgId

declare @DepartmentsAll table
(
	DepartmentId int null,
	FullName varchar(1000),
	CountOrganizations int,
	ActivatedOrganizations int,
	Precent varchar(10)
)

if @AllRegions = 1
begin
	insert into @DepartmentsAll
	select
		T.DepartmentId,
		CASE WHEN T.FullName is null THEN 'ЯЯЯЯ' ELSE T.FullName END as FullName,
		T.CountOrganizations,
		T.ActivatedOrganizations,
		CASE WHEN T.CountOrganizations=0
		THEN '-'
		ELSE
			cast(round((cast(T.ActivatedOrganizations as float)/cast(T.CountOrganizations as float))*100, 2) as varchar(10))+'%'
		END
	from
		(
		select
			OD.DepartmentId,
			(select O1.FullName from Organizations O1 where O1.OrgId = OD.DepartmentId) as FullName, 
			COUNT(O.OrgId) CountOrganizations,
			COUNT(CASE WHEN AU.[ActivatedUsers]>0 THEN 1 ELSE null END) ActivatedOrganizations
		from
			Organizations O
			left join @Departments OD on O.DepartmentId = OD.DepartmentId
			left join @ActivatedUser AU on O.OrgId = AU.OrgId
		where
			O.CreateDate <= @currentDate
		group by
			OD.DepartmentId
		) T
end
else begin
	insert into @DepartmentsAll
	select
		T.DepartmentId,
		CASE WHEN T.FullName is null THEN 'ЯЯЯЯ' ELSE T.FullName END as FullName,
		T.CountOrganizations,
		T.ActivatedOrganizations,
		CASE WHEN T.CountOrganizations=0
		THEN '-'
		ELSE
			cast(round((cast(T.ActivatedOrganizations as float)/cast(T.CountOrganizations as float))*100, 2) as varchar(10))+'%'
		END
	from
		(
		select
			OD.DepartmentId,
			(select O1.FullName from Organizations O1 where O1.OrgId = OD.DepartmentId) as FullName, 
			COUNT(O.OrgId) CountOrganizations,
			COUNT(CASE WHEN AU.[ActivatedUsers]>0 THEN 1 ELSE null END) ActivatedOrganizations
		from
			Organizations O
			left join @Departments OD on O.DepartmentId = OD.DepartmentId
			left join @ActivatedUser AU on O.OrgId = AU.OrgId
		where
			O.CreateDate <= @currentDate
			and OD.DepartmentId is not null
		group by
			OD.DepartmentId
		) T
end
	
declare @Organizations table
(
	OrgId int,
	DepartmentId int null,
	MainId int null,
	OrgTypeName varchar(30),
	FullName varchar(1000),
	ShortName varchar(500),
	RegionId int,
	RegionName varchar(255),
	DirectorPosition varchar(255),
	DirectorFullName varchar(255),
	EMail varchar(100),
	PhoneCityCode varchar(10),
	Phone varchar(100)
)

if @AllRegions = 1
begin
	insert into @Organizations
	select
		O.OrgId,
		O.DepartmentId,
		O.MainId,
		O.OrgTypeName,
		O.FullName,
		O.ShortName,
		O.RegionId,
		O.RegionName,
		O.DirectorPosition,
		O.DirectorFullName,
		O.EMail,
		O.PhoneCityCode,
		O.Phone
	from Organizations O
	where 
		O.CreateDate <= @currentDate
		and O.OrgId not in (select
								D.DepartmentId
							from
								@Departments D
							where D.DepartmentId is not null
							)
		and O.OrgId not in (select AU.OrgId
							from
								@ActivatedUser AU
							)
						
	order by
		case when O.MainId is null then O.OrgId else O.MainId end, O.MainId, O.FullName
end
else begin
	insert into @Organizations
	select
		O.OrgId,
		O.DepartmentId,
		O.MainId,
		O.OrgTypeName,
		O.FullName,
		O.ShortName,
		O.RegionId,
		O.RegionName,
		O.DirectorPosition,
		O.DirectorFullName,
		O.EMail,
		O.PhoneCityCode,
		O.Phone
	from Organizations O
		inner join Organizations O1 on O.DepartmentId = O1.OrgId 
			and O1.RegionId in (select RegionId from SplitInt(@regions))
	where 
		O.CreateDate <= @currentDate
		and O.OrgId not in (select
								D.DepartmentId
							from
								@Departments D
							where D.DepartmentId is not null
							)
		and O.OrgId not in (select AU.OrgId
							from
								@ActivatedUser AU
							)
						
	order by
		case when O.MainId is null then O.OrgId else O.MainId end, O.MainId, O.FullName
end
	
	
declare @Report table
(
	DepartmentId int null,
	DepartmentFullName varchar(1000),
	CountOrganizations int,
	ActivatedOrganizations int,
	Precent varchar(10),
	OrgId int,
	OrgMainId int null,
	OrgTypeName varchar(30),
	OrgFullName varchar(1000),
	OrgShortName varchar(500),
	RegionId int,
	RegionName varchar(255),
	OrgDirectorPosition varchar(255),
	OrgDirectorFullName varchar(255),
	OrgEMail varchar(100),
	OrgPhoneCityCode varchar(10),
	OrgPhone varchar(100)
)

insert into @Report
select
	D.DepartmentId,
	D.FullName,
	D.CountOrganizations,
	D.ActivatedOrganizations,
	D.Precent,
	null, null, null,
	null, null, null,
	null, null, null,
	null, null, null
from @DepartmentsAll D


insert into @Report
select 
	O.DepartmentId,
	null, null, null, null,
	O.OrgId,
	O.MainId,
	O.OrgTypeName,
	O.FullName,
	O.ShortName,
	O.RegionId,
	O.RegionName,
	O.DirectorPosition,
	O.DirectorFullName,
	O.EMail,
	O.PhoneCityCode,
	O.Phone
from @Organizations O

select *
from @Report
order by DepartmentId

end
GO

