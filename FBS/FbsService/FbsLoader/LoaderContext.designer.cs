#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FbsService.FbsLoader
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="fbs_loader_db")]
	internal partial class LoaderContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCNEDenyLoadingTask(CNEDenyLoadingTask instance);
    partial void UpdateCNEDenyLoadingTask(CNEDenyLoadingTask instance);
    partial void DeleteCNEDenyLoadingTask(CNEDenyLoadingTask instance);
    partial void InsertCNELoadingTask(CNELoadingTask instance);
    partial void UpdateCNELoadingTask(CNELoadingTask instance);
    partial void DeleteCNELoadingTask(CNELoadingTask instance);
    #endregion
		
		public LoaderContext() : 
				base(global::FbsService.Properties.Settings.Default.FbsLoaderConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public LoaderContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LoaderContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LoaderContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LoaderContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		internal System.Data.Linq.Table<CNEDenyLoadingTask> CNEDenyLoadingTasks
		{
			get
			{
				return this.GetTable<CNEDenyLoadingTask>();
			}
		}
		
		internal System.Data.Linq.Table<CNELoadingTask> CNELoadingTasks
		{
			get
			{
				return this.GetTable<CNELoadingTask>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ExecuteCommonNationalExamCertificateDenyLoading")]
		public int ExecuteCommonNationalExamCertificateDenyLoading([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="BigInt")] System.Nullable<long> taskId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), taskId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ExecuteCommonNationalExamCertificateLoading")]
		public int ExecuteCommonNationalExamCertificateLoading([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="BigInt")] System.Nullable<long> taskId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), taskId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.PrepareCommonNationalExamCertificateLoading")]
		public int PrepareCommonNationalExamCertificateLoading()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.PrepareCommonNationalExamCertificateDenyLoading")]
		public int PrepareCommonNationalExamCertificateDenyLoading()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.StopCommonNationalExamCertificateDenyLoadingTask")]
		public int StopCommonNationalExamCertificateDenyLoadingTask([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="BigInt")] System.Nullable<long> taskId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), taskId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.StopCommonNationalExamCertificateLoadingTask")]
		public int StopCommonNationalExamCertificateLoadingTask([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="BigInt")] System.Nullable<long> taskId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), taskId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ActivateCommonNationalExamDenyLoadingTask")]
		public int ActivateCommonNationalExamDenyLoadingTask([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="BigInt")] System.Nullable<long> editorAccountId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(255)")] string editorIp)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), editorAccountId, editorIp);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ActivateCommonNationalExamLoadingTask")]
		public int ActivateCommonNationalExamLoadingTask([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="BigInt")] System.Nullable<long> editorAccountId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(255)")] string editorIp)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), editorAccountId, editorIp);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UpdateCommonNationalExamCertificateLoadingTaskError")]
		public int UpdateCommonNationalExamCertificateLoadingTaskError([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="BigInt")] System.Nullable<long> taskId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="BigInt")] System.Nullable<long> rowIndex, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NText")] string error)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), taskId, rowIndex, error);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UpdateCommonNationalExamCertificateDenyLoadingTaskError")]
		public int UpdateCommonNationalExamCertificateDenyLoadingTaskError([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="BigInt")] System.Nullable<long> taskId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> rowIndex, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NText")] string error)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), taskId, rowIndex, error);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetProcessCommonNationalExamCertificateLoadingTask")]
		public ISingleResult<CNELoadingTask> GetProcessCommonNationalExamCertificateLoadingTask()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<CNELoadingTask>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetProcessCommonNationalExamCertificateDenyLoadingTask")]
		public ISingleResult<CNEDenyLoadingTask> GetProcessCommonNationalExamCertificateDenyLoadingTask()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<CNEDenyLoadingTask>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UpdateLoadingCommonNationalExamCertificate")]
		public int UpdateLoadingCommonNationalExamCertificate(
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="BigInt")] ref System.Nullable<long> id, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(255)")] string number, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(255)")] string educationInstitutionCode, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(255)")] string lastName, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(255)")] string firstName, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(255)")] string patronymicName, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Bit")] System.Nullable<bool> sex, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="class", DbType="NVarChar(100)")] string @class, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(255)")] string passportSeria, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(255)")] string passportNumber, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(255)")] string entrantNumber, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> regionId, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="UniqueIdentifier")] System.Nullable<System.Guid> updateId, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="BigInt")] System.Nullable<long> editorAccountid, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(255)")] string editorIp, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(255)")] string typographicNumber)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, number, educationInstitutionCode, lastName, firstName, patronymicName, sex, @class, passportSeria, passportNumber, entrantNumber, regionId, updateId, editorAccountid, editorIp, typographicNumber);
			id = ((System.Nullable<long>)(result.GetParameterValue(0)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UpdateLoadingCommonNationalExamCertificateSubject")]
		public int UpdateLoadingCommonNationalExamCertificateSubject([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="BigInt")] System.Nullable<long> certificateId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> regionId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> subjectId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<float> mark, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Bit")] System.Nullable<bool> hasAppeal)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), certificateId, regionId, subjectId, mark, hasAppeal);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ImportCommonNationalExamDenyCertificates")]
		public int ImportCommonNationalExamDenyCertificates([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(255)")] string denyCertificatesImportFile)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), denyCertificatesImportFile);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ImportCommonNationalExamCertificates")]
		public int ImportCommonNationalExamCertificates([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(255)")] string certificatesImportFile)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), certificatesImportFile);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ImportCommonNationalExamCertificateSubjects")]
		public int ImportCommonNationalExamCertificateSubjects([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(255)")] string subjectImportFile)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), subjectImportFile);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UpdateLoadingCommonNationalExamCertificateDeny")]
		public int UpdateLoadingCommonNationalExamCertificateDeny([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(255)")] string certificateNumber, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NText")] string comment, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(255)")] string newCertificateNumber, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="UniqueIdentifier")] System.Nullable<System.Guid> updateId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="BigInt")] System.Nullable<long> editorAccountid, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(255)")] string editorIp)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), certificateNumber, comment, newCertificateNumber, updateId, editorAccountid, editorIp);
			return ((int)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CommonNationalExamCertificateDenyLoadingTask")]
	internal partial class CNEDenyLoadingTask : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _SourceBatchUrl;
		
		private bool _IsActive;
		
		private System.Nullable<bool> _IsProcess;
		
		private System.Nullable<bool> _IsCorrect;
		
		private bool _IsLoaded;
		
		private long _EditorAccountId;
		
		private string _EditorIp;
		
		private System.Guid _UpdateId;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnSourceBatchUrlChanging(string value);
    partial void OnSourceBatchUrlChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsProcessChanging(System.Nullable<bool> value);
    partial void OnIsProcessChanged();
    partial void OnIsCorrectChanging(System.Nullable<bool> value);
    partial void OnIsCorrectChanged();
    partial void OnIsLoadedChanging(bool value);
    partial void OnIsLoadedChanged();
    partial void OnEditorAccountIdChanging(long value);
    partial void OnEditorAccountIdChanged();
    partial void OnEditorIpChanging(string value);
    partial void OnEditorIpChanged();
    partial void OnUpdateIdChanging(System.Guid value);
    partial void OnUpdateIdChanged();
    #endregion
		
		public CNEDenyLoadingTask()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SourceBatchUrl", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string SourceBatchUrl
		{
			get
			{
				return this._SourceBatchUrl;
			}
			set
			{
				if ((this._SourceBatchUrl != value))
				{
					this.OnSourceBatchUrlChanging(value);
					this.SendPropertyChanging();
					this._SourceBatchUrl = value;
					this.SendPropertyChanged("SourceBatchUrl");
					this.OnSourceBatchUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsProcess", DbType="Bit")]
		public System.Nullable<bool> IsProcess
		{
			get
			{
				return this._IsProcess;
			}
			set
			{
				if ((this._IsProcess != value))
				{
					this.OnIsProcessChanging(value);
					this.SendPropertyChanging();
					this._IsProcess = value;
					this.SendPropertyChanged("IsProcess");
					this.OnIsProcessChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsCorrect", DbType="Bit")]
		public System.Nullable<bool> IsCorrect
		{
			get
			{
				return this._IsCorrect;
			}
			set
			{
				if ((this._IsCorrect != value))
				{
					this.OnIsCorrectChanging(value);
					this.SendPropertyChanging();
					this._IsCorrect = value;
					this.SendPropertyChanged("IsCorrect");
					this.OnIsCorrectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsLoaded", DbType="Bit not null")]
		public bool IsLoaded
		{
			get
			{
				return this._IsLoaded;
			}
			set
			{
				if ((this._IsLoaded != value))
				{
					this.OnIsLoadedChanging(value);
					this.SendPropertyChanging();
					this._IsLoaded = value;
					this.SendPropertyChanged("IsLoaded");
					this.OnIsLoadedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EditorAccountId", DbType="bigint")]
		public long EditorAccountId
		{
			get
			{
				return this._EditorAccountId;
			}
			set
			{
				if ((this._EditorAccountId != value))
				{
					this.OnEditorAccountIdChanging(value);
					this.SendPropertyChanging();
					this._EditorAccountId = value;
					this.SendPropertyChanged("EditorAccountId");
					this.OnEditorAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EditorIp", DbType="NVarChar(255)", CanBeNull=false)]
		public string EditorIp
		{
			get
			{
				return this._EditorIp;
			}
			set
			{
				if ((this._EditorIp != value))
				{
					this.OnEditorIpChanging(value);
					this.SendPropertyChanging();
					this._EditorIp = value;
					this.SendPropertyChanged("EditorIp");
					this.OnEditorIpChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdateId", DbType="uniqueidentifier")]
		public System.Guid UpdateId
		{
			get
			{
				return this._UpdateId;
			}
			set
			{
				if ((this._UpdateId != value))
				{
					this.OnUpdateIdChanging(value);
					this.SendPropertyChanging();
					this._UpdateId = value;
					this.SendPropertyChanged("UpdateId");
					this.OnUpdateIdChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CommonNationalExamCertificateLoadingTask")]
	internal partial class CNELoadingTask : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _SourceBatchUrl;
		
		private bool _IsActive;
		
		private System.Nullable<bool> _IsProcess;
		
		private System.Nullable<bool> _IsCorrect;
		
		private bool _IsLoaded;
		
		private long _EditorAccountId;
		
		private string _EditorIp;
		
		private System.Guid _UpdateId;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnSourceBatchUrlChanging(string value);
    partial void OnSourceBatchUrlChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsProcessChanging(System.Nullable<bool> value);
    partial void OnIsProcessChanged();
    partial void OnIsCorrectChanging(System.Nullable<bool> value);
    partial void OnIsCorrectChanged();
    partial void OnIsLoadedChanging(bool value);
    partial void OnIsLoadedChanged();
    partial void OnEditorAccountIdChanging(long value);
    partial void OnEditorAccountIdChanged();
    partial void OnEditorIpChanging(string value);
    partial void OnEditorIpChanged();
    partial void OnUpdateIdChanging(System.Guid value);
    partial void OnUpdateIdChanged();
    #endregion
		
		public CNELoadingTask()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SourceBatchUrl", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string SourceBatchUrl
		{
			get
			{
				return this._SourceBatchUrl;
			}
			set
			{
				if ((this._SourceBatchUrl != value))
				{
					this.OnSourceBatchUrlChanging(value);
					this.SendPropertyChanging();
					this._SourceBatchUrl = value;
					this.SendPropertyChanged("SourceBatchUrl");
					this.OnSourceBatchUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsProcess", DbType="Bit")]
		public System.Nullable<bool> IsProcess
		{
			get
			{
				return this._IsProcess;
			}
			set
			{
				if ((this._IsProcess != value))
				{
					this.OnIsProcessChanging(value);
					this.SendPropertyChanging();
					this._IsProcess = value;
					this.SendPropertyChanged("IsProcess");
					this.OnIsProcessChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsCorrect", DbType="Bit")]
		public System.Nullable<bool> IsCorrect
		{
			get
			{
				return this._IsCorrect;
			}
			set
			{
				if ((this._IsCorrect != value))
				{
					this.OnIsCorrectChanging(value);
					this.SendPropertyChanging();
					this._IsCorrect = value;
					this.SendPropertyChanged("IsCorrect");
					this.OnIsCorrectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsLoaded", DbType="Bit NOT NULL")]
		public bool IsLoaded
		{
			get
			{
				return this._IsLoaded;
			}
			set
			{
				if ((this._IsLoaded != value))
				{
					this.OnIsLoadedChanging(value);
					this.SendPropertyChanging();
					this._IsLoaded = value;
					this.SendPropertyChanged("IsLoaded");
					this.OnIsLoadedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EditorAccountId", DbType="bigint")]
		public long EditorAccountId
		{
			get
			{
				return this._EditorAccountId;
			}
			set
			{
				if ((this._EditorAccountId != value))
				{
					this.OnEditorAccountIdChanging(value);
					this.SendPropertyChanging();
					this._EditorAccountId = value;
					this.SendPropertyChanged("EditorAccountId");
					this.OnEditorAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EditorIp", DbType="NVarChar(255)", CanBeNull=false)]
		public string EditorIp
		{
			get
			{
				return this._EditorIp;
			}
			set
			{
				if ((this._EditorIp != value))
				{
					this.OnEditorIpChanging(value);
					this.SendPropertyChanging();
					this._EditorIp = value;
					this.SendPropertyChanged("EditorIp");
					this.OnEditorIpChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdateId", DbType="uniqueidentifier")]
		public System.Guid UpdateId
		{
			get
			{
				return this._UpdateId;
			}
			set
			{
				if ((this._UpdateId != value))
				{
					this.OnUpdateIdChanging(value);
					this.SendPropertyChanging();
					this._UpdateId = value;
					this.SendPropertyChanged("UpdateId");
					this.OnUpdateIdChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
